#! /usr/bin/python3
from PySide2.QtWidgets import QApplication
from PySide2.QtQuick import QQuickView
from PySide2.QtCore import QUrl, QObject, Slot, Signal, Property
import os
import sys
import subprocess
import shutil

class Tunnel(QObject):

	def __init__(self):

		QObject.__init__(self)
		self.clearCache()
		self.isStandAlone()

	#def __init	

	def clearCache(self):

		clear=False
		user=os.environ["USER"]
		versionFile="/home/%s/.config/lliurex-shutdowner.conf"%user
		cachePath1="/home/%s/.cache/lliurex-shutdowner"%user
		cachePath2="/home/%s/.cache/lliurex-shutdowner-gui.py"%user
		installedVersion=self.getPackageVersion()

		if not os.path.exists(versionFile):
			with open(versionFile,'w') as fd:
				fd.write(installedVersion)
				fd.close()

			clear=True

		else:
			with open(versionFile,'r') as fd:
				fileVersion=fd.readline()
				fd.close()

			if fileVersion!=installedVersion:
				with open(versionFile,'w') as fd:
					fd.write(installedVersion)
					fd.close()
				clear=True
		
		if clear:
			if os.path.exists(cachePath1):
				shutil.rmtree(cachePath1)
			if os.path.exists(cachePath2):
				shutil.rmtree(cachePath2)

	#def clearCache

	def getPackageVersion(self):

		command = "LANG=C LANGUAGE=en apt-cache policy lliurex-shutdowner"
		p = subprocess.Popen(command,shell=True,stdout=subprocess.PIPE)
		installed = None
		for line in iter(p.stdout.readline,b""):
			if type(line) is bytes:
				line=line.decode()

			stripedline = line.strip()
			if stripedline.startswith("Installed"):
				installed = stripedline.replace("Installed: ","")

		return installed

	#def getPackageVersion

	def isStandAlone(self):

		self._standAlone=False
		self._isClient=False
		cmd='lliurex-version -v'
		p=subprocess.Popen(cmd,shell=True,stdout=subprocess.PIPE)
		result=p.communicate()[0]

		if type(result) is bytes:
			result=result.decode()
		flavours = [ x.strip() for x in result.split(',') ]

		for item in flavours:
			if 'server' in item:
				self._standAlone=False
				break
			elif 'client' in item:
				self._standAlone=False
				self._isClient=True
				break
			elif 'desktop' in item:
				self._standAlone=True

	#def is_StandAlone

	def _getStandAlone(self):

		return self._standAlone

	#def _getStandAlone

	def _getIsClient(self):
		
		return self._isClient

	#def _getIsClient	

		
	standAlone=Property(bool,_getStandAlone,constant=True)
	isClient=Property(bool,_getIsClient,constant=True)

	@Slot(str)
	def on_authenticated(self,passwd):
		
		self.passwd=passwd
	
	#def on_authenticated

	@Slot(str)
	def on_ticket(self,ticket):

		ticket=ticket.replace(' ','##U+0020##')
		passwd=None
		if self._isClient:
			passwd="'"+self.passwd+"'"
		os.system("python3 /usr/share/lliurex-shutdowner/lliurex-shutdowner-gui.py %s %s &"%(ticket,passwd))
		app.quit()

	#def on_ticket
	
#class Tunnel	

app = QApplication([])
tunnel = Tunnel()
view = QQuickView()
view.rootContext().setContextProperty("tunnel", tunnel)
url = QUrl("/usr/share/lliurex-shutdowner/rsrc/login.qml")
view.setSource(url)
view.show()
ret=app.exec_()
del view
del app
sys.exit(ret)
